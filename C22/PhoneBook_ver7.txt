import java.util.Scanner;
import java.util.HashSet;
import java.util.Iterator;
interface MenuHandler
{
	public static final int INSERT = 1;
	public static final int SEARCH = 2;
	public static final int DELETE = 3;
	public static final int OFF = 4;
	
}
interface InsertHandler
{
	public static final int NORMAL = 1;
	public static final int UNIV = 2;
	public static final int COMPANY = 3;
}

class PhoneInfo 
{
	String name;
	String phoneNumber;
	int num;
	
	public PhoneInfo(String n,String number)
	{
		this.name = n;
		this.phoneNumber = number;
		this.num = name.length();
		
	}
	void showInfo()
	{
		System.out.println("입력한 정보 출력...");
		System.out.println("name : "+name);
		System.out.println("number : "+phoneNumber);		
	}
	public int hashCode()
	{		
		return num%3;
	}
	public boolean equals(Object obj)
	{
		PhoneInfo pI = (PhoneInfo)obj; 
		if(this.name.compareTo(pI.name) == 0)
		{
			System.out.println("이미 저장된 데이터입니다.");
			
			return true;
		}
		else
		{
			System.out.println("데이터입력이 완료되었습니다.");
			return false;
		}
	}

}
class PhoneUnivInfo extends PhoneInfo 
{
	String major;
	int year;
	PhoneUnivInfo(String name,String number,String major,int year)
	{
		super(name,number);
		this.major = major;
		this.year = year;
	}
	void showInfo()
	{		
		super.showInfo();
		System.out.println("major : "+major);
		System.out.println("year : "+year);		
	}
}
class PhoneCompanyInfo extends PhoneInfo
{
	String company;
	PhoneCompanyInfo(String name,String number,String company)
	{
		super(name,number);
		this.company = company;
	}
	void showInfo()
	{		
		super.showInfo();
		System.out.println("company : "+company);		
	}
}
class MenuException extends Exception
{
	MenuException(int num)
	{
		System.out.println(num+"에 해당하는 선택은 존재하지 않습니다.");
		System.out.println("메뉴선택을 처음부터 다시 진행합니다.");
	}
}
class Manager implements InsertHandler
{
	String name;
	String phone;
	String major;
	int year;
	String company;
	Scanner sc = new Scanner(System.in);
	HashSet<PhoneInfo> personList = new HashSet<PhoneInfo>();
	
	static int checkMenu(int cnt) throws MenuException
	{
		Scanner sc = new Scanner(System.in);
		int choice = sc.nextInt();
		sc.nextLine();
		
		System.out.println(choice);
		if(choice > cnt || choice < 1)
		{
			MenuException menu = new MenuException(choice);
			throw menu;
		}
		return choice;
	}
	void Insert() 
	{	
		
		System.out.println("선택하세요...");
		System.out.printf("1.일반 2.대학 3.회사\n");				
		System.out.printf("선택 : ");
		
		int ch_result = 0;
		try 
		{
			ch_result = Manager.checkMenu(3);
		}
		catch (MenuException e) 
		{
			e.printStackTrace();
		}
		
		if(ch_result == NORMAL)
		{
			System.out.print("이름 :");
			name = sc.nextLine();
			System.out.print("번호 :");
			phone = sc.nextLine();			
			
			if(personList.add(new PhoneInfo(name,phone))==false)				
			{
				Iterator <PhoneInfo> itr = personList.iterator();
				
				while(itr.hasNext())
				{
					if(itr.next().name.compareTo(this.name) == 0)
					{
						itr.remove();
						personList.add(new PhoneInfo(name,phone));
						break;
					}
					else
					{
						continue;
					}
				}
			}
			else
			{
				System.out.println("데이터입력이 완료되었습니다.");
			}					
		}
		else if(ch_result == UNIV)
		{
			System.out.print("이름 :");
			name = sc.nextLine();
			System.out.print("번호 :");
			phone = sc.nextLine();
			System.out.print("전공 :");
			major = sc.nextLine();
			System.out.print("학년 :");
			year = sc.nextInt();
			sc.nextLine();
			
			if(personList.add(new PhoneUnivInfo(name,phone,major,year))==false)				
			{
				Iterator <PhoneInfo> itr = personList.iterator();			
				while(itr.hasNext())
				{
					if(itr.next().name.compareTo(this.name) == 0)
					{
						itr.remove();
						personList.add(new PhoneUnivInfo(name,phone,major,year));
						System.out.println("중복된 데이터의 삭제가 완료되었습니다.");
						break;
					}
					else
					{
						continue;
					}
				}
			}
			else
			{
				System.out.println("데이터입력이 완료되었습니다.");
			}
			
		}
		else if(ch_result == COMPANY)
		{
			System.out.print("이름 :");
			name = sc.nextLine();
			System.out.print("번호 :");
			phone = sc.nextLine();
			System.out.print("회사 :");
			company = sc.nextLine();
			
			if(personList.add(new PhoneCompanyInfo(name,phone,company))==false)				
			{
				Iterator <PhoneInfo> itr = personList.iterator();
				
				while(itr.hasNext())
				{
					if(itr.next().name.compareTo(this.name) == 0)
					{
						itr.remove();
						personList.add(new PhoneCompanyInfo(name,phone,company));
						System.out.println("중복된 데이터의 삭제가 완료되었습니다.");
						break;
					}
					else
					{
						continue;
					}
				}
			}
			else
			{
				System.out.println("데이터입력이 완료되었습니다.");
			}			
		}
	}
	
	void Search()
	{
		Iterator <PhoneInfo> itr = personList.iterator();
		while(itr.hasNext())
		{
			itr.next().showInfo();
				
		}
		System.out.println("데이터검색을 시작합니다.");
		System.out.printf("이름 : ");
		String searchName = sc.nextLine();		
		int check = 0;
		
		itr = personList.iterator();
		while(itr.hasNext())
		{
			System.out.println("hello");	
			PhoneInfo per1 = itr.next();			
			if(per1.name.compareTo(searchName) == 0)
			{
				System.out.println(searchName);
				per1.showInfo();
				check = 1;
				System.out.println("데이터 검색 완료");				
				break;
			}	
			else 
			{
				continue;
			}
		}
		if(check == 0)
		{
			System.out.println("찾고 계신 이름이 없습니다.");
		}
	}
	
	void Delete()
	{
		Iterator <PhoneInfo> itr = personList.iterator();
		System.out.println("데이터 삭제를 시작합니다.");
		System.out.printf("이름 :"+" ");
		String searchName = sc.nextLine();
		int delete_check = 0;
		
		while(itr.hasNext())
		{
			System.out.println(searchName);
			if(itr.next().name.compareTo(searchName) == 0)
			{
				itr.remove();
				delete_check = 1;
				System.out.println("삭제가 완료되었습니다.");
				break;
			}
			else
			{
				continue;
			}
		}
		
		if(delete_check == 0)
		{
			System.out.println("찾고 계신 이름이 없습니다.");
		}		
	}	
	
}
public class PhoneBook implements MenuHandler
{
	public static void main(String[] args)
	{
		Manager person = new Manager(); 
		do{			
			System.out.println("선택하세요...");
			System.out.println("1.데이터 입력");			
			System.out.println("2.데이터 검색");
			System.out.println("3.데이터 삭제");
			System.out.println("4.프로그램 종료");
			int ch_menu = 0;
			try 
			{
				ch_menu = Manager.checkMenu(4);
			}
			catch (MenuException e1) 
			{
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
						
					
			if(ch_menu == INSERT) //입력
			{
				
				person.Insert();				
			}
			else if(ch_menu == SEARCH) //검색
			{
				
				person.Search();				
			}
			
			else if(ch_menu == DELETE) //삭제
			{
				
				person.Delete();
			}
			else if(ch_menu == OFF)
			{
				System.out.println("Finish");
				break;
			}			
		} 
		while(true);				
	}

}
